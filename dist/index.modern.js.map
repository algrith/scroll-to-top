{"version":3,"file":"index.modern.js","sources":["../src/types/index.ts","../src/utils/index.ts","../src/hooks/index.ts","../src/components/controller.tsx"],"sourcesContent":["import { ButtonHTMLAttributes, CSSProperties, RefObject } from 'react';\n\nexport type ScrollToTopControllerProps = ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport enum DefaultControllerProps {\n  CLASSNAME= 'algrith-scroll-to-top-controller',\n  ID = 'algrith-scroll-to-top-controller'\n};\n\nexport type UseScrollToTopProps = {\n  controllerRef?: RefObject<HTMLElement | null>;\n  display?: CSSProperties['display'];\n  hideControllerAt?: number;\n  behavior?: ScrollBehavior;\n  selector?: string;\n  top?: number;\n};","export const ScrollToTopErrors = {\n\tInvalidDisplay: (display: any) => {\n\t\treturn `'display parameter must be a valid CSS display string. Supplied display: ${display}`;\n\t},\n\tControllerNotFound: () => {\n\t\treturn `Controller element not found.`;\n\t}\n};","import { DefaultControllerProps, UseScrollToTopProps } from '../types';\nimport { useCallback, useEffect, useRef } from 'react';\nimport { ScrollToTopErrors } from '../utils';\n\nconst useScrollToTop = (props: UseScrollToTopProps) => {\n  const scrollToTop = () => scroll({ behavior, top });\n  const controller = useRef<HTMLElement>(null);\n  const {\n    selector = `#${DefaultControllerProps.ID}`,\n    hideControllerAt = 200,\n    behavior = 'smooth',\n    display = 'flex',\n    controllerRef,\n    top = 0\n  } = props ?? {};\n  \n  const toggleController = useCallback(() => {\n    if (!controller.current) return;\n    const scrollPosition = document.body.scrollTop || document.documentElement.scrollTop;\n    controller.current.style.display = scrollPosition > hideControllerAt ? display : 'none';\n  }, [hideControllerAt, display]);\n\n  const setController = useCallback(() => {\n    if (controllerRef?.current) controller.current = controllerRef.current;\n    else if (selector) controller.current = document.querySelector(selector);\n    \n    if (!controller.current) {\n      console.error(ScrollToTopErrors.ControllerNotFound());\n    }\n    \n    return controller.current;\n  }, [controllerRef, selector]);\n\n  const checkErrors = useCallback(() => {\n    if (typeof display !== 'string') {\n      console.error(ScrollToTopErrors.InvalidDisplay(display));\n    }\n  }, [display]);\n  \n  useEffect(() => {\n    const controller = setController();\n    checkErrors();\n\n    if (controller) {\n      window.addEventListener('scroll', toggleController);\n      controller.addEventListener('click', scrollToTop);\n\n      return () => {\n        controller.removeEventListener('click', scrollToTop);\n        window.removeEventListener(\n          'scroll',\n          toggleController\n        );\n      }\n    }\n\t}, []);\n\n  return scrollToTop;\n};\n\nexport default useScrollToTop;","import { ScrollToTopControllerProps, DefaultControllerProps } from '../types';\nimport { FC, RefObject, forwardRef, useRef } from 'react';\nimport useScrollToTop from '../hooks';\nimport './styles.css';\n\nconst ScrollToTopController: FC = forwardRef((props: ScrollToTopControllerProps, ref) => {\n  const controllerRef = ref as RefObject<HTMLButtonElement> ?? useRef(null);\n  useScrollToTop({ controllerRef });\n\n  return (\n    <button className={DefaultControllerProps.CLASSNAME} ref={controllerRef} type=\"button\" id={DefaultControllerProps.ID} {...props}>\n\t\t  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth=\"2\">\n\t\t\t  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M7 11l5-5m0 0l5 5m-5-5v12\" />\n\t\t  </svg>\n\t  </button>\n  )\n});\n\nScrollToTopController.displayName = 'ScrollToTopController';\n\nexport default ScrollToTopController;"],"names":["DefaultControllerProps","useScrollToTop","props","scrollToTop","scroll","behavior","top","controller","useRef","selector","ID","hideControllerAt","display","controllerRef","toggleController","useCallback","current","scrollPosition","document","body","scrollTop","documentElement","style","setController","querySelector","console","error","checkErrors","ScrollToTopErrors","useEffect","window","addEventListener","removeEventListener","ScrollToTopController","forwardRef","ref","_jsx","_extends","className","CLASSNAME","type","id","children","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","displayName"],"mappings":"+UAIY,IAAAA,GAAZ,SAAYA,GACVA,EAAA,UAAA,mCACAA,EAAA,GAAA,kCACD,CAHD,CAAYA,IAAAA,EAGX,CAAA,ICPM,MCIDC,EAAkBC,IACtB,MAAMC,EAAcA,IAAMC,OAAO,CAAEC,WAAUC,QACvCC,EAAaC,EAAoB,OACjCC,SACJA,EAAW,IAAIT,EAAuBU,KAAIC,iBAC1CA,EAAmB,IAAGN,SACtBA,EAAW,SAAQO,QACnBA,EAAU,OAAMC,cAChBA,EAAaP,IACbA,EAAM,GACC,MAALJ,EAAAA,EAAS,CAAA,EAEPY,EAAmBC,EAAY,KACnC,IAAKR,EAAWS,QAAS,OACzB,MAAMC,EAAiBC,SAASC,KAAKC,WAAaF,SAASG,gBAAgBD,UAC3Eb,EAAWS,QAAQM,MAAMV,QAAUK,EAAiBN,EAAmBC,EAAU,MAAA,EAChF,CAACD,EAAkBC,IAEhBW,EAAgBR,EAAY,WAC5BF,GAAAA,EAAeG,QAAST,EAAWS,QAAUH,EAAcG,QACtDP,IAAUF,EAAWS,QAAUE,SAASM,cAAcf,IAE1DF,EAAWS,SACdS,QAAQC,MDtBL,iCCyBEnB,EAAWS,SACjB,CAACH,EAAeJ,IAEbkB,EAAcZ,EAAY,KACP,iBAAZH,GACTa,QAAQC,MDlCId,IACT,4EAA4EA,ICiCjEgB,CAAiChB,GACjD,EACC,CAACA,IAoBJ,OAlBAiB,EAAU,KACR,MAAMtB,EAAagB,IAGnB,GAFAI,IAEIpB,EAIF,OAHAuB,OAAOC,iBAAiB,SAAUjB,GAClCP,EAAWwB,iBAAiB,QAAS5B,GAE9B,KACLI,EAAWyB,oBAAoB,QAAS7B,GACxC2B,OAAOE,oBACL,SACAlB,EAEJ,CACF,EACA,IAEKX,GCpDH8B,EAA4BC,EAAW,CAAChC,EAAmCiC,KAC/E,MAAMtB,EAAmD,MAAnCsB,EAAAA,EAAuC3B,EAAO,MAGpE,OAFAP,EAAe,CAAEY,kBAGfuB,EAAA,SAAAC,EAAA,CAAQC,UAAWtC,EAAuBuC,UAAWJ,IAAKtB,EAAe2B,KAAK,SAASC,GAAIzC,EAAuBU,IAAQR,EAAK,CAAAwC,SAC/HN,EAAK,MAAA,CAAAO,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,OAAO,eAAeC,YAAY,IACzGL,SAAAN,EAAA,OAAA,CAAMY,cAAc,QAAQC,eAAe,QAAQC,EAAE,kCAChD,GAKVjB,EAAsBkB,YAAc"}