{"version":3,"file":"index.umd.js","sources":["../src/types/index.ts","../src/utils/index.ts","../src/hooks/index.ts","../src/components/controller.tsx"],"sourcesContent":["import { ButtonHTMLAttributes, CSSProperties, RefObject } from 'react';\n\nexport type ScrollToTopControllerProps = ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport enum DefaultControllerProps {\n  CLASSNAME= 'algrith-scroll-to-top-controller',\n  ID = 'algrith-scroll-to-top-controller'\n};\n\nexport type UseScrollToTopProps = {\n  controllerRef?: RefObject<HTMLElement | null>;\n  display?: CSSProperties['display'];\n  hideControllerAt?: number;\n  behavior?: ScrollBehavior;\n  selector?: string;\n  top?: number;\n};","export const ScrollToTopErrors = {\n\tInvalidDisplay: (display: any) => {\n\t\treturn `'display parameter must be a valid CSS display string. Supplied display: ${display}`;\n\t},\n\tControllerNotFound: () => {\n\t\treturn `Controller element not found.`;\n\t}\n};","import { DefaultControllerProps, UseScrollToTopProps } from '../types';\nimport { useCallback, useEffect, useRef } from 'react';\nimport { ScrollToTopErrors } from '../utils';\n\nconst useScrollToTop = (props: UseScrollToTopProps) => {\n  const scrollToTop = () => scroll({ behavior, top });\n  const controller = useRef<HTMLElement>(null);\n  const {\n    selector = `#${DefaultControllerProps.ID}`,\n    hideControllerAt = 200,\n    behavior = 'smooth',\n    display = 'flex',\n    controllerRef,\n    top = 0\n  } = props ?? {};\n  \n  const toggleController = useCallback(() => {\n    if (!controller.current) return;\n    const scrollPosition = document.body.scrollTop || document.documentElement.scrollTop;\n    controller.current.style.display = scrollPosition > hideControllerAt ? display : 'none';\n  }, [hideControllerAt, display]);\n\n  const setController = useCallback(() => {\n    if (controllerRef?.current) controller.current = controllerRef.current;\n    else if (selector) controller.current = document.querySelector(selector);\n    \n    if (!controller.current) {\n      console.error(ScrollToTopErrors.ControllerNotFound());\n    }\n    \n    return controller.current;\n  }, [controllerRef, selector]);\n\n  const checkErrors = useCallback(() => {\n    if (typeof display !== 'string') {\n      console.error(ScrollToTopErrors.InvalidDisplay(display));\n    }\n  }, [display]);\n  \n  useEffect(() => {\n    const controller = setController();\n    checkErrors();\n\n    if (controller) {\n      window.addEventListener('scroll', toggleController);\n      controller.addEventListener('click', scrollToTop);\n\n      return () => {\n        controller.removeEventListener('click', scrollToTop);\n        window.removeEventListener(\n          'scroll',\n          toggleController\n        );\n      }\n    }\n\t}, []);\n\n  return scrollToTop;\n};\n\nexport default useScrollToTop;","import { ScrollToTopControllerProps, DefaultControllerProps } from '../types';\nimport { FC, RefObject, forwardRef, useRef } from 'react';\nimport useScrollToTop from '../hooks';\nimport './styles.css';\n\nconst ScrollToTopController: FC = forwardRef((props: ScrollToTopControllerProps, ref) => {\n  const controllerRef = ref as RefObject<HTMLButtonElement> ?? useRef(null);\n  useScrollToTop({ controllerRef });\n\n  return (\n    <button className={DefaultControllerProps.CLASSNAME} ref={controllerRef} type=\"button\" id={DefaultControllerProps.ID} {...props}>\n\t\t  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth=\"2\">\n\t\t\t  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M7 11l5-5m0 0l5 5m-5-5v12\" />\n\t\t  </svg>\n\t  </button>\n  )\n});\n\nScrollToTopController.displayName = 'ScrollToTopController';\n\nexport default ScrollToTopController;"],"names":["DefaultControllerProps","useScrollToTop","props","scrollToTop","scroll","behavior","top","controller","useRef","_ref","_ref$selector","selector","ID","_ref$hideControllerAt","hideControllerAt","_ref$behavior","_ref$display","display","controllerRef","_ref$top","toggleController","useCallback","current","scrollPosition","document","body","scrollTop","documentElement","style","setController","querySelector","console","error","checkErrors","ScrollToTopErrors","useEffect","window","addEventListener","removeEventListener","ScrollToTopController","forwardRef","ref","_jsx","_extends","className","CLASSNAME","type","id","children","jsx","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","displayName"],"mappings":"giBAIY,IAAAA,GAAZ,SAAYA,GACVA,EAAA,UAAA,mCACAA,EAAA,GAAA,kCACD,CAHD,CAAYA,IAAAA,EAGX,CAAA,ICPY,ICIPC,EAAiB,SAACC,GACtB,IAAMC,EAAc,kBAAMC,OAAO,CAAEC,SAAAA,EAAUC,IAAAA,GAAM,EAC7CC,EAAaC,EAAAA,OAAoB,MACvCC,EAOIP,MAAAA,EAAAA,EAAS,CAAA,EAAEQ,EAAAD,EANbE,SAAAA,OAAeX,IAAPU,EAAOV,IAAAA,EAAuBY,GAAEF,EAAAG,EAAAJ,EACxCK,iBAAAA,OAAgB,IAAAD,EAAG,IAAGA,EAAAE,EAAAN,EACtBJ,SAAAA,OAAW,IAAHU,EAAG,SAAQA,EAAAC,EAAAP,EACnBQ,QAAAA,WAAOD,EAAG,OAAMA,EAChBE,EAAaT,EAAbS,cAAaC,EAAAV,EACbH,IAAAA,OAAG,IAAAa,EAAG,EAACA,EAGHC,EAAmBC,EAAWA,YAAC,WACnC,GAAKd,EAAWe,QAAhB,CACA,IAAMC,EAAiBC,SAASC,KAAKC,WAAaF,SAASG,gBAAgBD,UAC3EnB,EAAWe,QAAQM,MAAMX,QAAUM,EAAiBT,EAAmBG,EAAU,MAFxD,CAG3B,EAAG,CAACH,EAAkBG,IAEhBY,EAAgBR,cAAY,WAQhC,aAPIH,GAAAA,EAAeI,QAASf,EAAWe,QAAUJ,EAAcI,QACtDX,IAAUJ,EAAWe,QAAUE,SAASM,cAAcnB,IAE1DJ,EAAWe,SACdS,QAAQC,MDrBb,iCCwBUzB,EAAWe,OACpB,EAAG,CAACJ,EAAeP,IAEbsB,EAAcZ,cAAY,WACP,iBAAZJ,GACTc,QAAQC,MDlCG,SAACf,GAChB,MAAmFA,4EAAAA,CACpF,CCgCmBiB,CAAiCjB,GAEnD,EAAG,CAACA,IAoBJ,OAlBAkB,EAAAA,UAAU,WACR,IAAM5B,EAAasB,IAGnB,GAFAI,IAEI1B,EAIF,OAHA6B,OAAOC,iBAAiB,SAAUjB,GAClCb,EAAW8B,iBAAiB,QAASlC,GAE9B,WACLI,EAAW+B,oBAAoB,QAASnC,GACxCiC,OAAOE,oBACL,SACAlB,EAEJ,CAEL,EAAG,IAEKjB,CACT,ECrDMoC,EAA4BC,EAAAA,WAAW,SAACtC,EAAmCuC,GAC/E,IAAMvB,EAAgBuB,MAAAA,EAAAA,EAAuCjC,EAAMA,OAAC,MAGpE,OAFAP,EAAe,CAAEiB,cAAAA,IAGfwB,EAAAA,IAAA,SAAAC,GAAQC,UAAW5C,EAAuB6C,UAAWJ,IAAKvB,EAAe4B,KAAK,SAASC,GAAI/C,EAAuBY,IAAQV,EAAK8C,CAAAA,SAC/HN,EAAKO,IAAA,MAAA,CAAAC,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,OAAO,eAAeC,YAAY,IACzGN,SAAAN,EAAAA,IAAA,OAAA,CAAMa,cAAc,QAAQC,eAAe,QAAQC,EAAE,kCAI1D,GAEAlB,EAAsBmB,YAAc"}