{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import type { SpeechToTextEnginesURLs, TranscriberOptions, TranscriberResponse } from './types';\nimport { useState } from 'react';\n\nconst speechToTextEngineUrls: SpeechToTextEnginesURLs = {\n  google: `https://speech.googleapis.com/v1/speech:recognize`\n};\n\nconst useTranscriber = (apiKey: string, options: TranscriberOptions) => {\n  const engineUrl = `${speechToTextEngineUrls[options.engine]}?key=${apiKey}`;\n  const [response, setResponse] = useState<TranscriberResponse>({\n    loading: false,\n    transcript: '',\n    error: null\n  });\n\n  const transcribe = (audioBlob: Blob) => {\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      if (!reader.result || typeof reader.result !== 'string') return;\n      setResponse((prev) => ({ ...prev, loading: true }));\n      const base64Data = reader.result.split(',')[1];\n      \n      fetch(engineUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          config: {\n            sampleRateHertz: 48000,\n            encoding: 'WEBM_OPUS',\n            languageCode: 'en-US'\n          },\n          audio: {\n            content: base64Data,\n          },\n        }),\n      })\n      .then((response) => response.json())\n      .then((data) => {\n        const transcript = data.results.map((result: Record<string, any>) => (\n          result.alternatives[0].transcript\n        )).join('\\n');\n\n        setResponse((prev) => ({\n          ...prev,\n          loading: false,\n          error: null,\n          transcript\n        }));\n      })\n      .catch((error) => {\n        console.error('Error performing speech-to-text:', error);\n        setResponse((prev) => ({\n          ...prev,\n          loading: false,\n          transcript: '',\n          error\n        }));\n      });\n    };\n\n    reader.readAsDataURL(audioBlob);\n  };\n\n  return {\n    transcribe,\n    response\n  };\n};\n\nexport default useTranscriber;"],"names":["speechToTextEngineUrls","google","apiKey","options","engineUrl","engine","_useState","useState","loading","transcript","error","setResponse","transcribe","audioBlob","reader","FileReader","onloadend","result","prev","_extends","base64Data","split","fetch","method","headers","body","JSON","stringify","config","sampleRateHertz","encoding","languageCode","audio","content","then","response","json","data","results","map","alternatives","join","console","readAsDataURL"],"mappings":"+OAGA,IAAMA,EAAkD,CACtDC,2EAGqB,SAACC,EAAgBC,GACtC,IAAMC,EAAeJ,EAAuBG,EAAQE,gBAAeH,EACnEI,EAAgCC,EAAAA,SAA8B,CAC5DC,SAAS,EACTC,WAAY,GACZC,MAAO,OAHQC,EAAWL,KAyD5B,MAAO,CACLM,WApDiB,SAACC,GAClB,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,UAAY,WACjB,GAAKF,EAAOG,QAAmC,iBAAlBH,EAAOG,OAApC,CACAN,EAAY,SAACO,GAAI,OAAAC,EAAWD,CAAAA,EAAAA,GAAMV,SAAS,GAAO,GAClD,IAAMY,EAAaN,EAAOG,OAAOI,MAAM,KAAK,GAE5CC,MAAMlB,EAAW,CACfmB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,OAAQ,CACNC,gBAAiB,KACjBC,SAAU,YACVC,aAAc,SAEhBC,MAAO,CACLC,QAASb,OAIdc,KAAK,SAACC,GAAQ,OAAKA,EAASC,MAAM,GAClCF,KAAK,SAACG,GACL,IAAM5B,EAAa4B,EAAKC,QAAQC,IAAI,SAACtB,UACnCA,EAAOuB,aAAa,GAAG/B,UAAU,GAChCgC,KAAK,MAER9B,EAAY,SAACO,GAAIC,OAAAA,EACZD,CAAAA,EAAAA,GACHV,SAAS,EACTE,MAAO,KACPD,WAAAA,GAAU,EAEd,GACM,MAAC,SAACC,GACNgC,QAAQhC,MAAM,mCAAoCA,GAClDC,EAAY,SAACO,GAAI,OAAAC,EACZD,CAAAA,EAAAA,EACHV,CAAAA,SAAS,EACTC,WAAY,GACZC,MAAAA,KAEJ,GACF,EAEAI,EAAO6B,cAAc9B,EACvB,EAIEsB,SA3Da7B,EAAEK,GA6DnB"}